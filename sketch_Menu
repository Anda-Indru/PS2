#include <LiquidCrystal.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define BUTTON_OK 8
#define BUTTON_CANCEL 9
#define BUTTON_PREV 10
#define BUTTON_NEXT 11

const int rs = 7, en = 6, d4 = 2, d5 = 3, d6 = 4, d7 = 5;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int oneWireBus=13;
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);


unsigned int h=22,m=59,s=57;

float TEMP;

enum Buttons 
{
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus 
{
  MENU_MAIN = 0,
  MENU_MSJ_NECITITE,
  MENU_MSJ_CITITE,
  MENU_MSJ_STERGERE,
  MENU_CONTROL_MANUAL,
  MENU_CONTROL_AUTOMAT,
  MENU_TEMP_CURENTA,
  MENU_INUNDATII,
  MENU_MAX_NUM
};

Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_MSJ_NECITITE:
        lcd.setCursor(0,0);
        lcd.print("1.1");
        lcd.setCursor(0, 1);
        lcd.print("MESAJE NECITITE");
        break;
    case MENU_MSJ_CITITE:   
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("1.2");
        lcd.setCursor(0,1);
        lcd.print("MESAJE CITITE");
        break;
    case MENU_MSJ_STERGERE:
        lcd.setCursor(0,0);
        lcd.print("1.3");
        lcd.setCursor(0,1);
        lcd.print("STERGERE MESAJE");
        break; 
    case MENU_CONTROL_MANUAL:
        lcd.setCursor(0,0);
        lcd.print("2.1");
        lcd.setCursor(0,1);
        lcd.print("CONTROL MANUAL");
        break;
    case MENU_CONTROL_AUTOMAT:
        lcd.setCursor(0,0);
        lcd.print("2.2");
        lcd.setCursor(0,1);
        lcd.print("CONTROL AUTOMAT");
        break;
    case MENU_TEMP_CURENTA:
        lcd.setCursor(0,0);
        lcd.print("3.1");
        lcd.setCursor(0,1);
        lcd.print("TEMP CURENTA");
        break;
    case MENU_INUNDATII:
        lcd.setCursor(0,0);
        lcd.print("4.1");
        lcd.setCursor(0,1);
        lcd.print("INUNDATII");
        break;  
    case MENU_MAIN:
    default:
    { lcd.setCursor(4,0);
      lcd.print("-MENIU-");
      break;
    }
  }
  
  if(current_menu != MENU_MAIN)
  {
    if(current_menu == MENU_MSJ_NECITITE)
  {
   
      
  }
  else if (current_menu == MENU_MSJ_CITITE)
  {

    
  }
   else if(current_menu == MENU_MSJ_STERGERE)
  {
    lcd.setCursor(0,0);
    lcd.print("Stergeti?");
    lcd.setCursor(0,1);
    lcd.print("DA-OK; NU-CANCEL"); 
  }
    else if(current_menu == MENU_CONTROL_MANUAL)
  {
    lcd.setCursor(0,0);
    lcd.print("Control manual");
    lcd.setCursor(0,1);
    lcd.print("ACTIVAT");     
  }
    else if(current_menu == MENU_CONTROL_AUTOMAT)
  {
    lcd.setCursor(0,0);
    lcd.print("Control automat");
    lcd.setCursor(0,1);
    lcd.print("ACTIVAT");
      
  }
    else if(current_menu == MENU_TEMP_CURENTA)
  {
      lcd.setCursor(0,0);
      lcd.print("TEMP CURENTA: ");
      lcd.setCursor(0,1);
      lcd.print("TEMP = ");
      lcd.print(TEMP);     
  }
    else if(current_menu == MENU_INUNDATII)
  {
    
      
  } 
    
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home},         //MENU_MSJ_NECITITE
  {go_home, go_home},        // MENU_MSJ_CITITE
  {go_home, go_home},       // MENU_MSJ_STERGERE
  {go_home, go_home},      // MENU_CONTROL_MANUAL
  {go_home, go_home},     // MENU_CONTROL_AUTOMAT
  {go_home, go_home},    // MENU_TEMP_CURENTA
  {go_home, go_home},   // MENU_INUNDATII
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  //Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);

//  pinMode(enB, OUTPUT);
//  pinMode(Bpin3, OUTPUT);
//  pinMode(Bpin4, OUTPUT);
  
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  sensors.begin(); 
  
  pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
    pinMode(10, INPUT);
  digitalWrite(10, LOW); // pull-down
    pinMode(11, INPUT);
  digitalWrite(11, LOW); // pull-down

   
}

void loop()
{
  sensors.requestTemperatures();
  TEMP=sensors.getTempCByIndex(0);
  Serial.println(TEMP);
 //lcd.print(TEMP);
 volatile Buttons event = GetButtons();
 if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
    print_menu(scroll_menu);

  delay(2000);
      lcd.clear();
}
 
